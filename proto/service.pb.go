// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/service.proto

package liveness

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Multiaddresses       []string `protobuf:"bytes,1,rep,name=multiaddresses,proto3" json:"multiaddresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c33392ef2c1961ba, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMultiaddresses() []string {
	if m != nil {
		return m.Multiaddresses
	}
	return nil
}

type Response struct {
	Pingmessage          string   `protobuf:"bytes,1,opt,name=pingmessage,proto3" json:"pingmessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c33392ef2c1961ba, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetPingmessage() string {
	if m != nil {
		return m.Pingmessage
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "liveness.Request")
	proto.RegisterType((*Response)(nil), "liveness.Response")
}

func init() { proto.RegisterFile("proto/service.proto", fileDescriptor_c33392ef2c1961ba) }

var fileDescriptor_c33392ef2c1961ba = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xce, 0xcd, 0x0a, 0x82, 0x40,
	0x14, 0xc5, 0xf1, 0x86, 0xa0, 0xf4, 0x06, 0x51, 0xd3, 0x46, 0x5a, 0x89, 0x8b, 0x70, 0x11, 0xf6,
	0xb5, 0x6e, 0x1d, 0x41, 0xb4, 0x98, 0x37, 0xb0, 0x3c, 0xc8, 0x80, 0x3a, 0x36, 0x77, 0xf4, 0xf9,
	0x03, 0xb3, 0x90, 0x96, 0xe7, 0xb7, 0x39, 0x7f, 0x5a, 0xd5, 0xd6, 0x38, 0xb3, 0x63, 0xd8, 0x56,
	0x3f, 0x91, 0x74, 0x4b, 0x7a, 0x85, 0x6e, 0x51, 0x81, 0x39, 0x3a, 0xd0, 0x54, 0xe1, 0xd5, 0x80,
	0x9d, 0xdc, 0xd0, 0xbc, 0x6c, 0x0a, 0xa7, 0xd3, 0x2c, 0xb3, 0x60, 0x06, 0x07, 0x22, 0x1c, 0xc7,
	0xbe, 0xfa, 0xd3, 0x68, 0x4b, 0x9e, 0x02, 0xd7, 0xa6, 0x62, 0xc8, 0x90, 0x66, 0xb5, 0xae, 0xf2,
	0x12, 0xcc, 0x69, 0x8e, 0x40, 0x84, 0x22, 0xf6, 0xd5, 0x90, 0x8e, 0x57, 0xf2, 0x6e, 0xfd, 0x99,
	0x3c, 0xd3, 0xe2, 0x02, 0x77, 0x37, 0x19, 0xf8, 0x67, 0xcb, 0xe4, 0xdb, 0x92, 0xf4, 0x21, 0x6b,
	0x39, 0xa4, 0xcf, 0x51, 0x34, 0xda, 0x8b, 0xc7, 0xa4, 0x8b, 0x3f, 0xbd, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xf3, 0xf5, 0x11, 0x48, 0xd3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LivenessClient is the client API for Liveness service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LivenessClient interface {
	GetNodesLiveness(ctx context.Context, in *Request, opts ...grpc.CallOption) (Liveness_GetNodesLivenessClient, error)
}

type livenessClient struct {
	cc *grpc.ClientConn
}

func NewLivenessClient(cc *grpc.ClientConn) LivenessClient {
	return &livenessClient{cc}
}

func (c *livenessClient) GetNodesLiveness(ctx context.Context, in *Request, opts ...grpc.CallOption) (Liveness_GetNodesLivenessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Liveness_serviceDesc.Streams[0], "/liveness.Liveness/GetNodesLiveness", opts...)
	if err != nil {
		return nil, err
	}
	x := &livenessGetNodesLivenessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Liveness_GetNodesLivenessClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type livenessGetNodesLivenessClient struct {
	grpc.ClientStream
}

func (x *livenessGetNodesLivenessClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LivenessServer is the server API for Liveness service.
type LivenessServer interface {
	GetNodesLiveness(*Request, Liveness_GetNodesLivenessServer) error
}

// UnimplementedLivenessServer can be embedded to have forward compatible implementations.
type UnimplementedLivenessServer struct {
}

func (*UnimplementedLivenessServer) GetNodesLiveness(req *Request, srv Liveness_GetNodesLivenessServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodesLiveness not implemented")
}

func RegisterLivenessServer(s *grpc.Server, srv LivenessServer) {
	s.RegisterService(&_Liveness_serviceDesc, srv)
}

func _Liveness_GetNodesLiveness_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LivenessServer).GetNodesLiveness(m, &livenessGetNodesLivenessServer{stream})
}

type Liveness_GetNodesLivenessServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type livenessGetNodesLivenessServer struct {
	grpc.ServerStream
}

func (x *livenessGetNodesLivenessServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Liveness_serviceDesc = grpc.ServiceDesc{
	ServiceName: "liveness.Liveness",
	HandlerType: (*LivenessServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNodesLiveness",
			Handler:       _Liveness_GetNodesLiveness_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
